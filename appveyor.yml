
shallow_clone: true

environment:

  global:
    NSIS_DIR: "%PROGRAMFILES(x86)%/NSIS"

  matrix:

     - PYTHON: "C:\\Miniconda37"
       PYTHON_VERSION_SHORT: "37"
       PYTHON_VERSION: "3.7.1"
       PYTHON_ARCH: "32"
       WP_URL: 'https://github.com/winpython/winpython/releases/download/1.11.20181031/Winpython32-3.7.1.0.exe'
       WP_CRC: '152fdd8ec34f123a14ddf0f74f8f9038ef9ba2676bf60954fa8bf9afdd73ec4a'

     - PYTHON: "C:\\Miniconda37-x64"
       PYTHON_VERSION_SHORT: "37"
       PYTHON_VERSION: "3.7.1"
       PYTHON_ARCH: "64"
       WP_URL: 'https://github.com/winpython/winpython/releases/download/1.11.20181031/Winpython64-3.7.1.0.exe'
       WP_CRC: 'e95de8d6b90c217d6a71d831367b6f94eb76ddc855f041ea1e029b081aba107e'

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO %APPVEYOR_BUILD_FOLDER%"
  - "ECHO %CMD_IN_ENV%"

install:
  - ps: Add-AppveyorMessage "Installing hyperspy-bundle..."
  - "%PYTHON%/Scripts/pip install ."

build: false  # Not a C# project, build stuff at the test step instead.

  # Build bundle installer for tags:
before_deploy:
  # Download WinPython installer if not cached
  - ps: Add-AppveyorMessage "Installing WinPython..."
  - "SET WP_INSTDIR=%USERPROFILE%\\wpdir\\WinPython-%PYTHON_ARCH%\\"
  - "SET WP_EXE=%USERPROFILE%/wpdir/WinPython3-%PYTHON_ARCH%bit.exe"
  - "mkdir %USERPROFILE%\\wpdir"
  - ps: appveyor DownloadFile $Env:WP_URL -FileName $Env:WP_EXE
  - ps: Write-Output (Get-FileHash $Env:WP_EXE)
  - ps: if ((Get-FileHash $Env:WP_EXE).Hash -ne $Env:WP_CRC) { exit(1) }
  - ps: (& $Env:WP_EXE /VERYSILENT /DIR=$Env:WP_INSTDIR | Out-Null )
  - "ls %USERPROFILE%/wpdir"
  - "ls %WP_INSTDIR%"

  # Patch NSIS to allow longer strings
  - ps: Add-AppveyorMessage "Setting up WinPython environment..."
  - ps: Start-FileDownload ('http://freefr.dl.sourceforge.net/project/nsis/NSIS%203/3.03/nsis-3.03-strlen_8192.zip') ../nsis_patch.zip
  - ps: if ((Get-FileHash '../nsis_patch.zip').Hash -ne '023d637df9cd146f2d207fbbc627a5f63e5f71fea012523797c5af6bf342704b') { exit(1) }
  - "7z x ../nsis_patch.zip -o%NSIS_DIR% -aoa"
  - ps: Start-FileDownload ('http://nsis.sourceforge.net/mediawiki/images/e/eb/Textreplace.zip') ../Textreplace.zip
  - ps: if ((Get-FileHash '../Textreplace.zip').Hash -ne '6462C0C22E87E7C81DD9076D40ACC74C515243A56F10F4F8FE720F7099DB3BA2') { exit(1) }
  - "7z x ../Textreplace.zip -o%NSIS_DIR% -aoa"
  - ps: Start-FileDownload ('http://nsis.sourceforge.net/mediawiki/images/8/8f/UAC.zip') ../UAC.zip
  - ps: if ((Get-FileHash '../UAC.zip').Hash -ne '20E3192AF5598568887C16D88DE59A52C2CE4A26E42C5FB8BEE8105DCBBD1760') { exit(1) }
  - "7z x ../UAC.zip -o%NSIS_DIR% -aoa"

  # Install current hyperspy in WinPython
  - "%CMD_IN_ENV% %WP_INSTDIR%/scripts/env.bat"
  # Give info about python vesion and compiler used to compile the python
  - "%CMD_IN_ENV% python.exe -c \"import sys; print(sys.version)\""

  # Remove when updating winpython to >=2018-04
  - "%CMD_IN_ENV% pip uninstall -y typing"
  - "%CMD_IN_ENV% pip install --upgrade ipython ptpython jupyter-console"
  # tqdm RuntimeError when running samfire tests, see https://github.com/hyperspy/hyperspy/issues/2077
  - "%CMD_IN_ENV% pip install tqdm==4.24"
  # Use a specific branch of hyperspy on github
  #- "%CMD_IN_ENV% pip install https://github.com/francisco-dlp/hyperspy/archive/v1.4.1.zip#egg=hyperspy[all]"
  # Use a release version of hyperspy
  - "%CMD_IN_ENV% pip install hyperspy[all]"
  - "%CMD_IN_ENV% pip install start_jupyter_cm"
  # Try to run twice as workaround for permission error (for now, we keep master to test the bundle)
  - "%CMD_IN_ENV% pip install https://github.com/hyperspy/hyperspyUI/archive/master.zip || pip install https://github.com/hyperspy/hyperspyUI/archive/master.zip"

  # Custom installer step
  - ps: Add-AppveyorMessage "Creating installer..."
  - "%PYTHON%/python.exe -m hspy_bundle.configure_installer %USERPROFILE%/wpdir %PYTHON_ARCH% %APPVEYOR_REPO_TAG_NAME%"
  - "\"%NSIS_DIR%/makensis.exe\" /V3 NSIS_installer_script-%PYTHON_ARCH%bit.nsi"
  - "ls"
  - ps: Add-AppveyorMessage "Installer created! Run tests in Winpython environment..."
  # Re-run tests in WinPython environment
  # Use matplotlib 2.2.3 until tests are not compatible with 3.0
  - "%CMD_IN_ENV% pip install matplotlib==2.2.3 pytest-mpl"
  - ps: if($Env:PYTHON_ARCH -eq "64") {$Env:PYTHON_DIR_NAME="python-"+$Env:PYTHON_VERSION+".amd64"} else {$Env:PYTHON_DIR_NAME="python-"+$Env:PYTHON_VERSION}
  # Use hyperspy-bundle tag as version name
  - "SET BUNDLE_INST_NAME=HyperSpy-Bundle-%APPVEYOR_REPO_TAG_NAME%-py%PYTHON_VERSION_SHORT%-%PYTHON_ARCH%bit.exe"
  - "ren HyperSpy-Bundle-%APPVEYOR_REPO_TAG_NAME%-%PYTHON_ARCH%bit.exe %BUNDLE_INST_NAME%"
  - "SET HYPERSPY_DIR=%WP_INSTDIR%\\%PYTHON_DIR_NAME%\\Lib\\site-packages\\hyperspy"
  - ps: py.test --mpl $Env:HYPERSPY_DIR
  - ps: Add-AppveyorMessage "Tests finished! Pushing to GitHub..."
  - "appveyor PushArtifact %BUNDLE_INST_NAME%"

on_failure:
  # In case, the tests fail, we still push the installer to debug the failure if necessary.
  - "appveyor PushArtifact %BUNDLE_INST_NAME%"

deploy:
  provider: GitHub
  auth_token:
    #   to266:
    #secure: ptV5Dkz3pSVdjD0qRDpxJgjVlddFtleZ+B+c2X1Fg67P8OX3bHWVktRmlj6hfLhM
    #   vidartf:
    #secure: KwAfARhGEqOnZHltPB6kKu8xmnoiGSk7NMYJBIEbWvFCuVnepoPV7ZcIjUN3pUpK
    #   sem-geologist:
    #secure: RRqUkx9H5VuFNITmm+YzgB0qnqgVGPH1yrPVxb4oCD+FAjcTch2WZAiPEKn4L6w6
    #   ericpre:
    secure: ae8XsPI+vKJI9AWm0r9+ec71CIkXcnCHlNIQ57v+87hh5k1xuAAxIOi1CFKEmmZv
  artifact: /.*\.exe/  # upload installers to release assets
  draft: false
  prerelease: false
  force_update: true
  on:
    appveyor_repo_tag: true        # deploy on tag push only
